apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'spring-boot'

mainClassName = "org.apache.mesos.logstash.scheduler.Application"
ext {
    imageName = imagePrefix + '/logstash-scheduler'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

repositories {
    maven {
        url "https://jitpack.io"
    }
}

configurations {
    all*.exclude group:"org.springframework.boot", module: "spring-boot-starter-logging"
}

dependencies {
    compile project(':logstash-commons')

    compile 'commons-lang:commons-lang:2.6'
    compile 'log4j:log4j:1.2.16'
    compile 'commons-io:commons-io:2.4'

    compile("org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}")
    compile("org.springframework:spring-messaging")

    compile 'org.webjars:react:0.13.3'
    compile 'org.webjars:react-router:0.13.2'
    compile 'org.webjars.bower:stomp-websocket:2.3.4'
    compile 'org.webjars:sockjs-client:1.0.0'
    compile 'org.webjars:highcharts:4.1.6'
}


clean.doFirst {
    delete "src/main/resources/logstash-mesos-executor.jar"
    delete "src/main/resources/start-executor.sh"

}

jar {
    baseName = "logstash-mesos-scheduler"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    from project(":logstash-executor").getTasksByName("shadowJar", false)  // Include executor
    from project(":logstash-executor").file("start-executor.sh")

    rename(/logstash-mesos-executor-(.*)\.jar/, "logstash-mesos-executor.jar")

    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Version': project.version
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

test {
    testLogging {
        showStandardStreams = true
    }
}

task taskCopyFilesForDocker(type: Copy) {
    dependsOn "copyJar"
}

task copyJar(type: Copy) {
    dependsOn   "bootRepackage"
    from        "build/libs/logstash-mesos-scheduler-${project.version}.jar"
    from        "start-scheduler.sh"
    into        "build/docker"
    into        "build/libs"

    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}
